package {{.FeatureName}}s

import (
	"net/http"
	"github.com/gin-gonic/gin"
)

// Controller defines the handler methods for  API endpoints.
type Controller struct {
	svc Service
}

// NewController creates a new Controller with dependency injection.
func NewController(svc Service) *Controller {
	return &Controller{svc: svc}
}

func (ctrl *Controller) GetAll(c *gin.Context) {
	items, err := ctrl.svc.GetAll()
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, items)
}

func (ctrl *Controller) Create(c *gin.Context) {
	var item {{.FeatureNameCapitalized}}
	if err := c.ShouldBindJSON(&item); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	if err := ctrl.svc.Create(&item); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, item)
}

func (ctrl *Controller) Update(c *gin.Context) {
    var item {{.FeatureNameCapitalized}}
	if err := c.ShouldBindJSON(&item); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

    id := c.Param("id")

	if err := ctrl.svc.Update(id, &item); err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, item)
}

func (ctrl *Controller) Delete(c *gin.Context) {
	id := c.Param("id")
	err := ctrl.svc.Delete(id)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, nil)
}

func (ctrl *Controller) GetByID(c *gin.Context) {
	id := c.Param("id")
	item, err := ctrl.svc.GetByID(id)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, item)
}

