package {{.FeatureName}}

import (
	"context"
)

// {{.FeatureNameCapitalized}}ServiceImpl implements Service interface.
type {{.FeatureNameCapitalized}}ServiceImpl struct {
	repo {{.FeatureNameCapitalized}}Repository
}

// NewService creates a new Service with dependency injection.
func NewService(repo {{.FeatureNameCapitalized}}Repository) Service {
	return &ServiceImpl{repo: repo}
}

func (s *{{.FeatureNameCapitalized}}ServiceImpl) Delete(id string) error {
	return s.repo.Repository.Delete(id)
}

func (s *{{.FeatureNameCapitalized}}ServiceImpl) Create(item *{{.FeatureNameCapitalized}}) error {
	return s.repo.Repository.Create(item)
}

func (s *{{.FeatureNameCapitalized}}ServiceImpl) GetAll() ([]*{{.FeatureNameCapitalized}}, error) {
	return s.repo.Repository.GetAll()
}

func (s *{{.FeatureNameCapitalized}}ServiceImpl) GetByID(id string) (*{{.FeatureNameCapitalized}}, error) {
	return s.repo.Repository.GetByID(id)
}

func (s *{{.FeatureNameCapitalized}}ServiceImpl) Update(id string, item *{{.FeatureNameCapitalized}}) error {
	return s.repo.Repository.Update(id, item)
}